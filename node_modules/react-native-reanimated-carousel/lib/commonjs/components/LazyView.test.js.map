{"version":3,"sources":["LazyView.test.tsx"],"names":["describe","it","getByText","expect","toBeTruthy","queryByText","toBeNull","container","children","length","toBe"],"mappings":"mFAAA,0DACA,oDACA,0CAEA,oC,gMAEAA,QAAQ,CAAC,UAAD,CAAa,UAAM,CACzBC,EAAE,CAAC,kDAAD,CAAqD,UAAM,CAC3D,YAAsB,wBACpB,oBAAC,kBAAD,EAAU,YAAY,CAAE,IAAxB,UACE,oBAAC,kBAAD,WAAM,YAAN,EADF,EADoB,CAAtB,CAAQC,SAAR,SAAQA,SAAR,CAMAC,MAAM,CAACD,SAAS,CAAC,YAAD,CAAV,CAAN,CAAgCE,UAAhC,GACD,CARC,CAAF,CAUAH,EAAE,CAAC,uDAAD,CAA0D,UAAM,CAChE,aAAwB,wBACtB,oBAAC,kBAAD,EAAU,YAAY,CAAE,KAAxB,UACE,oBAAC,kBAAD,WAAM,YAAN,EADF,EADsB,CAAxB,CAAQI,WAAR,UAAQA,WAAR,CAMAF,MAAM,CAACE,WAAW,CAAC,YAAD,CAAZ,CAAN,CAAkCC,QAAlC,GACD,CARC,CAAF,CAUAL,EAAE,CAAC,yDAAD,CAA4D,UAAM,CAClE,aAAsB,wBACpB,oBAAC,kBAAD,EAAU,YAAY,CAAE,KAAxB,UACE,oBAAC,kBAAD,WAAM,YAAN,EADF,EADoB,CAAtB,CAAQM,SAAR,UAAQA,SAAR,CAMAJ,MAAM,CAACI,SAAS,CAACC,QAAV,CAAmBC,MAApB,CAAN,CAAkCC,IAAlC,CAAuC,CAAvC,EACD,CARC,CAAF,CAUAT,EAAE,CAAC,2DAAD,CAA8D,UAAM,CACpE,aAAsB,wBACpB,qBAAC,kBAAD,EAAU,YAAY,CAAE,IAAxB,WACE,oBAAC,kBAAD,WAAM,aAAN,EADF,CAEE,oBAAC,kBAAD,WAAM,cAAN,EAFF,GADoB,CAAtB,CAAQC,SAAR,UAAQA,SAAR,CAOAC,MAAM,CAACD,SAAS,CAAC,aAAD,CAAV,CAAN,CAAiCE,UAAjC,GACAD,MAAM,CAACD,SAAS,CAAC,cAAD,CAAV,CAAN,CAAkCE,UAAlC,GACD,CAVC,CAAF,CAYAH,EAAE,CAAC,gEAAD,CAAmE,UAAM,CACzE,aAAwB,wBACtB,qBAAC,kBAAD,EAAU,YAAY,CAAE,KAAxB,WACE,oBAAC,kBAAD,WAAM,aAAN,EADF,CAEE,oBAAC,kBAAD,WAAM,cAAN,EAFF,GADsB,CAAxB,CAAQI,WAAR,UAAQA,WAAR,CAOAF,MAAM,CAACE,WAAW,CAAC,aAAD,CAAZ,CAAN,CAAmCC,QAAnC,GACAH,MAAM,CAACE,WAAW,CAAC,cAAD,CAAZ,CAAN,CAAoCC,QAApC,GACD,CAVC,CAAF,CAWD,CAtDO,CAAR","sourcesContent":["import { render } from \"@testing-library/react-native\";\nimport React from \"react\";\nimport { Text } from \"react-native\";\n\nimport { LazyView } from \"./LazyView\";\n\ndescribe(\"LazyView\", () => {\n  it(\"should render children when shouldUpdate is true\", () => {\n    const { getByText } = render(\n      <LazyView shouldUpdate={true}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(getByText(\"Test Child\")).toBeTruthy();\n  });\n\n  it(\"should not render children when shouldUpdate is false\", () => {\n    const { queryByText } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(queryByText(\"Test Child\")).toBeNull();\n  });\n\n  it(\"should render empty fragment when shouldUpdate is false\", () => {\n    const { container } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(container.children.length).toBe(0);\n  });\n\n  it(\"should handle multiple children when shouldUpdate is true\", () => {\n    const { getByText } = render(\n      <LazyView shouldUpdate={true}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </LazyView>\n    );\n\n    expect(getByText(\"First Child\")).toBeTruthy();\n    expect(getByText(\"Second Child\")).toBeTruthy();\n  });\n\n  it(\"should not render multiple children when shouldUpdate is false\", () => {\n    const { queryByText } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </LazyView>\n    );\n\n    expect(queryByText(\"First Child\")).toBeNull();\n    expect(queryByText(\"Second Child\")).toBeNull();\n  });\n});\n"]}