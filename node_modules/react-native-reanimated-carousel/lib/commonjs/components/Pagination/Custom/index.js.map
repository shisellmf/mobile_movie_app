{"version":3,"sources":["index.tsx"],"names":["Custom","props","activeDotStyle","dotStyle","progress","horizontal","data","size","containerStyle","renderItem","onPress","customReanimatedStyle","carouselName","width","height","Error","maxItemWidth","Math","max","maxItemHeight","justifyContent","alignSelf","minWidth","minHeight","flexDirection","map","item","index","length"],"mappings":"kKAAA,oDAEA,yCAMA,gD,0MAgBO,GAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAeC,KAAf,CAAwC,kFAC5D,GACEC,CAAAA,cADF,CAYID,KAZJ,CACEC,cADF,CAEEC,QAFF,CAYIF,KAZJ,CAEEE,QAFF,CAGEC,QAHF,CAYIH,KAZJ,CAGEG,QAHF,mBAYIH,KAZJ,CAIEI,UAJF,CAIEA,UAJF,4BAIe,IAJf,mBAKEC,IALF,CAYIL,KAZJ,CAKEK,IALF,CAMEC,IANF,CAYIN,KAZJ,CAMEM,IANF,CAOEC,cAPF,CAYIP,KAZJ,CAOEO,cAPF,CAQEC,UARF,CAYIR,KAZJ,CAQEQ,UARF,CASEC,QATF,CAYIT,KAZJ,CASES,OATF,CAUEC,qBAVF,CAYIV,KAZJ,CAUEU,qBAVF,CAWEC,YAXF,CAYIX,KAZJ,CAWEW,YAXF,CAcA,GACE,MAAOL,CAAAA,IAAP,GAAgB,QAAhB,EACA,OAAOJ,QAAP,cAAOA,QAAQ,CAAEU,KAAjB,IAA2B,QAD3B,EAEA,OAAOV,QAAP,cAAOA,QAAQ,CAAEW,MAAjB,IAA4B,QAF5B,EAGA,OAAOZ,cAAP,cAAOA,cAAc,CAAEW,KAAvB,IAAiC,QAHjC,EAIA,OAAOX,cAAP,cAAOA,cAAc,CAAEY,MAAvB,IAAkC,QALpC,CAOE,KAAM,IAAIC,CAAAA,KAAJ,CAAU,oCAAV,CAAN,CAEF,GAAMC,CAAAA,YAAY,CAAGC,IAAI,CAACC,GAAL,CAASX,IAAT,OAASA,IAAT,CAAiB,CAAjB,kBAAoBJ,QAApB,cAAoBA,QAAQ,CAAEU,KAA9B,wBAAuC,CAAvC,wBAA0CX,cAA1C,cAA0CA,cAAc,CAAEW,KAA1D,8BAAmE,CAAnE,CAArB,CACA,GAAMM,CAAAA,aAAa,CAAGF,IAAI,CAACC,GAAL,CAASX,IAAT,OAASA,IAAT,CAAiB,CAAjB,mBAAoBJ,QAApB,cAAoBA,QAAQ,CAAEW,MAA9B,yBAAwC,CAAxC,wBAA2CZ,cAA3C,cAA2CA,cAAc,CAAEY,MAA3D,8BAAqE,CAArE,CAAtB,CAEA,MACE,oBAAC,iBAAD,EACE,KAAK,CAAE,CACL,CACEM,cAAc,CAAE,eADlB,CAEEC,SAAS,CAAE,QAFb,CAGEC,QAAQ,CAAEN,YAHZ,CAIEO,SAAS,CAAEJ,aAJb,CADK,CAOLd,UAAU,CACN,CACEmB,aAAa,CAAE,KADjB,CADM,CAIN,CACEA,aAAa,CAAE,QADjB,CAXC,CAcLhB,cAdK,CADT,UAkBGF,IAAI,CAACmB,GAAL,CAAS,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACzB,MACE,oBAAC,8BAAD,EAEE,KAAK,CAAEA,KAFT,CAGE,IAAI,CAAEpB,IAHR,CAIE,KAAK,CAAED,IAAI,CAACsB,MAJd,CAKE,QAAQ,CAAEzB,QALZ,CAME,SAAS,CAAEC,QANb,CAOE,UAAU,CAAE,CAACC,UAPf,CAQE,cAAc,CAAEH,cARlB,CASE,qBAAqB,CAAES,qBATzB,CAUE,OAAO,CAAE,yBAAMD,CAAAA,QAAN,cAAMA,QAAO,CAAGiB,KAAH,CAAb,EAVX,CAWE,kBAAkB,CAAG,SAAQA,KAAK,CAAG,CAAE,OAAMrB,IAAI,CAACsB,MAAO,MAAKhB,YAAa,EAX7E,UAaGH,UAbH,cAaGA,UAAU,CAAGiB,IAAH,CAASC,KAAT,CAbb,EACOA,KADP,CADF,CAiBD,CAlBA,CAlBH,EADF,CAwCD,CAnEM,C","sourcesContent":["import React from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport { View } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\n\nimport type { DefaultStyle } from \"react-native-reanimated/lib/typescript/reanimated2/hook/commonTypes\";\n\nimport type { DotStyle } from \"./PaginationItem\";\nimport { PaginationItem } from \"./PaginationItem\";\n\nexport interface ShapeProps<T extends {}> {\n  progress: SharedValue<number>;\n  horizontal?: boolean;\n  data: Array<T>;\n  renderItem?: (item: T, index: number) => React.ReactNode;\n  containerStyle?: StyleProp<ViewStyle>;\n  dotStyle?: DotStyle;\n  activeDotStyle?: DotStyle;\n  size?: number;\n  onPress?: (index: number) => void;\n  customReanimatedStyle?: (progress: number, index: number, length: number) => DefaultStyle;\n  carouselName?: string;\n}\n\nexport const Custom = <T extends {}>(props: ShapeProps<T>) => {\n  const {\n    activeDotStyle,\n    dotStyle,\n    progress,\n    horizontal = true,\n    data,\n    size,\n    containerStyle,\n    renderItem,\n    onPress,\n    customReanimatedStyle,\n    carouselName,\n  } = props;\n\n  if (\n    typeof size === \"string\" ||\n    typeof dotStyle?.width === \"string\" ||\n    typeof dotStyle?.height === \"string\" ||\n    typeof activeDotStyle?.width === \"string\" ||\n    typeof activeDotStyle?.height === \"string\"\n  )\n    throw new Error(\"size/width/height must be a number\");\n\n  const maxItemWidth = Math.max(size ?? 0, dotStyle?.width ?? 0, activeDotStyle?.width ?? 0);\n  const maxItemHeight = Math.max(size ?? 0, dotStyle?.height ?? 0, activeDotStyle?.height ?? 0);\n\n  return (\n    <View\n      style={[\n        {\n          justifyContent: \"space-between\",\n          alignSelf: \"center\",\n          minWidth: maxItemWidth,\n          minHeight: maxItemHeight,\n        },\n        horizontal\n          ? {\n              flexDirection: \"row\",\n            }\n          : {\n              flexDirection: \"column\",\n            },\n        containerStyle,\n      ]}\n    >\n      {data.map((item, index) => {\n        return (\n          <PaginationItem\n            key={index}\n            index={index}\n            size={size}\n            count={data.length}\n            dotStyle={dotStyle}\n            animValue={progress}\n            horizontal={!horizontal}\n            activeDotStyle={activeDotStyle}\n            customReanimatedStyle={customReanimatedStyle}\n            onPress={() => onPress?.(index)}\n            accessibilityLabel={`Slide ${index + 1} of ${data.length} - ${carouselName}`}\n          >\n            {renderItem?.(item, index)}\n          </PaginationItem>\n        );\n      })}\n    </View>\n  );\n};\n"]}