{"version":3,"sources":["index.test.tsx"],"names":["jest","mock","useSharedValue","fn","initialValue","value","describe","mockProps","width","height","data","renderItem","mockCommon","size","validLength","mockValue","props","common","it","getByText","expect","toBeTruthy","contextValue","TestComponent","React","useContext","GlobalStateContext","toHaveProperty","layout","containerSize","toEqual","itemDimensions","updateItemDimensions","toBe","updateContainerSize","hookResult","context","contextResult"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react-native\";\nimport React from \"react\";\nimport { Text } from \"react-native\";\n\nimport { GlobalStateContext, GlobalStateProvider, useGlobalState } from \"./index\";\n\n// Mock react-native-reanimated\njest.mock(\"react-native-reanimated\", () => ({\n  useSharedValue: jest.fn((initialValue) => ({\n    value: initialValue,\n  })),\n}));\n\ndescribe(\"GlobalStateProvider\", () => {\n  const mockProps = {\n    width: 300,\n    height: 200,\n    data: [1, 2, 3],\n    renderItem: () => <Text>Item</Text>,\n  } as any;\n\n  const mockCommon = {\n    size: 300,\n    validLength: 3,\n  };\n\n  const mockValue = {\n    props: mockProps,\n    common: mockCommon,\n  };\n\n  it(\"should render children correctly\", () => {\n    const { getByText } = render(\n      <GlobalStateProvider value={mockValue}>\n        <Text>Test Child</Text>\n      </GlobalStateProvider>\n    );\n\n    expect(getByText(\"Test Child\")).toBeTruthy();\n  });\n\n  it(\"should provide context value with layout methods\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue).toHaveProperty(\"props\");\n    expect(contextValue).toHaveProperty(\"common\");\n    expect(contextValue).toHaveProperty(\"layout\");\n    expect(contextValue.layout).toHaveProperty(\"containerSize\");\n    expect(contextValue.layout).toHaveProperty(\"itemDimensions\");\n    expect(contextValue.layout).toHaveProperty(\"updateItemDimensions\");\n    expect(contextValue.layout).toHaveProperty(\"updateContainerSize\");\n  });\n\n  it(\"should initialize containerSize with default values\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.layout.containerSize.value).toEqual({ width: 0, height: 0 });\n  });\n\n  it(\"should initialize itemDimensions with empty object\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.layout.itemDimensions.value).toEqual({});\n  });\n\n  it(\"should provide updateItemDimensions function\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(typeof contextValue.layout.updateItemDimensions).toBe(\"function\");\n\n    // Test the function\n    contextValue.layout.updateItemDimensions(0, { width: 100, height: 50 });\n    expect(contextValue.layout.itemDimensions.value).toEqual({\n      0: { width: 100, height: 50 },\n    });\n  });\n\n  it(\"should provide updateContainerSize function\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(typeof contextValue.layout.updateContainerSize).toBe(\"function\");\n\n    // Test the function\n    contextValue.layout.updateContainerSize({ width: 400, height: 300 });\n    expect(contextValue.layout.containerSize.value).toEqual({ width: 400, height: 300 });\n  });\n\n  it(\"should merge props and common with layout\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.props).toEqual(mockProps);\n    expect(contextValue.common).toEqual(mockCommon);\n  });\n\n  it(\"should handle multiple children\", () => {\n    const { getByText } = render(\n      <GlobalStateProvider value={mockValue}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </GlobalStateProvider>\n    );\n\n    expect(getByText(\"First Child\")).toBeTruthy();\n    expect(getByText(\"Second Child\")).toBeTruthy();\n  });\n\n  it(\"should handle updateItemDimensions with multiple items\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    // Add multiple items\n    contextValue.layout.updateItemDimensions(0, { width: 100, height: 50 });\n    contextValue.layout.updateItemDimensions(1, { width: 120, height: 60 });\n    contextValue.layout.updateItemDimensions(2, { width: 90, height: 45 });\n\n    expect(contextValue.layout.itemDimensions.value).toEqual({\n      0: { width: 100, height: 50 },\n      1: { width: 120, height: 60 },\n      2: { width: 90, height: 45 },\n    });\n  });\n});\n\ndescribe(\"useGlobalState\", () => {\n  const mockValue = {\n    props: { width: 300, data: [1, 2, 3], renderItem: () => <Text>Item</Text> } as any,\n    common: { size: 300, validLength: 3 },\n  };\n\n  it(\"should return context value when used within provider\", () => {\n    let hookResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toHaveProperty(\"props\");\n    expect(hookResult).toHaveProperty(\"common\");\n    expect(hookResult).toHaveProperty(\"layout\");\n  });\n\n  it(\"should provide expected hook functionality\", () => {\n    // Test that hook returns context when used correctly\n    let hookResult: any;\n\n    const TestComponent = () => {\n      const context = useGlobalState();\n      hookResult = context;\n      return <Text>Test</Text>;\n    };\n\n    const mockValue = {\n      props: { width: 300, data: [1, 2, 3], renderItem: () => <Text>Item</Text> } as any,\n      common: { size: 300, validLength: 3 },\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toHaveProperty(\"props\");\n    expect(hookResult).toHaveProperty(\"common\");\n    expect(hookResult).toHaveProperty(\"layout\");\n  });\n\n  it(\"should return the same context value as directly accessing context\", () => {\n    let hookResult: any;\n    let contextResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      contextResult = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toBe(contextResult);\n  });\n\n  it(\"should provide all expected properties\", () => {\n    let hookResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult.props).toEqual(mockValue.props);\n    expect(hookResult.common).toEqual(mockValue.common);\n    expect(hookResult.layout).toHaveProperty(\"containerSize\");\n    expect(hookResult.layout).toHaveProperty(\"itemDimensions\");\n    expect(hookResult.layout).toHaveProperty(\"updateItemDimensions\");\n    expect(hookResult.layout).toHaveProperty(\"updateContainerSize\");\n  });\n});\n\ndescribe(\"GlobalStateContext\", () => {\n  it(\"should have default empty context value\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(<TestComponent />);\n\n    expect(contextValue).toEqual({});\n  });\n});\n"]}