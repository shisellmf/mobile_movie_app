{"version":3,"sources":["log.test.ts"],"names":["describe","mockConsoleLog","jest","fn","originalConsoleLog","console","log","beforeEach","afterEach","mockClear","it","args","key","expect","toHaveBeenCalledWith","undefined","complexObj","nested","array","func","date","Date","arr","three","toBe","Number","NEGATIVE_INFINITY","Math","PI","POSITIVE_INFINITY","NaN"],"mappings":"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","sourcesContent":["import { log, round } from \"./log\";\n\ndescribe(\"log utilities\", () => {\n  describe(\"log\", () => {\n    const mockConsoleLog = jest.fn();\n    const originalConsoleLog = console.log;\n\n    beforeEach(() => {\n      console.log = mockConsoleLog;\n    });\n\n    afterEach(() => {\n      mockConsoleLog.mockClear();\n      console.log = originalConsoleLog;\n    });\n\n    it(\"should call console.log with provided arguments\", () => {\n      const args = [\"test\", 123, { key: \"value\" }];\n      log(...args);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith(...args);\n    });\n\n    it(\"should handle single argument\", () => {\n      log(\"test\");\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\");\n    });\n\n    it(\"should handle multiple arguments\", () => {\n      log(\"test\", 123, true);\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\", 123, true);\n    });\n\n    it(\"should handle no arguments\", () => {\n      log();\n      expect(mockConsoleLog).toHaveBeenCalledWith();\n    });\n\n    it(\"should handle null and undefined\", () => {\n      log(null, undefined);\n      expect(mockConsoleLog).toHaveBeenCalledWith(null, undefined);\n    });\n\n    it(\"should handle complex objects\", () => {\n      const complexObj = {\n        nested: { array: [1, 2, 3] },\n        func: () => \"test\",\n        date: new Date(\"2023-01-01\"),\n      };\n      log(complexObj);\n      expect(mockConsoleLog).toHaveBeenCalledWith(complexObj);\n    });\n\n    it(\"should handle arrays\", () => {\n      const arr = [1, \"two\", { three: 3 }];\n      log(arr);\n      expect(mockConsoleLog).toHaveBeenCalledWith(arr);\n    });\n\n    it(\"should handle mixed types\", () => {\n      log(\"string\", 42, true, null, undefined, { key: \"value\" }, [1, 2, 3]);\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        \"string\",\n        42,\n        true,\n        null,\n        undefined,\n        { key: \"value\" },\n        [1, 2, 3]\n      );\n    });\n  });\n\n  describe(\"round\", () => {\n    it(\"should round positive numbers correctly\", () => {\n      expect(round(1.4)).toBe(1);\n      expect(round(1.5)).toBe(2);\n      expect(round(1.6)).toBe(2);\n    });\n\n    it(\"should round negative numbers correctly\", () => {\n      expect(round(-1.4)).toBe(-1);\n      expect(round(-1.5)).toBe(-1);\n      expect(round(-1.6)).toBe(-2);\n    });\n\n    it(\"should handle zero values\", () => {\n      expect(round(0)).toBe(0);\n      expect(round(-0)).toBe(-0);\n      expect(1 / round(-0)).toBe(Number.NEGATIVE_INFINITY);\n    });\n\n    it(\"should handle integers\", () => {\n      expect(round(5)).toBe(5);\n      expect(round(-5)).toBe(-5);\n    });\n\n    it(\"should handle decimal places\", () => {\n      expect(round(Math.PI)).toBe(3);\n      expect(round(-Math.PI)).toBe(-3);\n    });\n\n    it(\"should handle edge cases\", () => {\n      expect(round(0.5)).toBe(1);\n      expect(round(-0.5)).toBe(-0);\n      expect(round(1.999999)).toBe(2);\n      expect(round(-1.999999)).toBe(-2);\n    });\n\n    it(\"should handle very large numbers\", () => {\n      expect(round(1e10 + 0.4)).toBe(1e10);\n      expect(round(1e10 + 0.6)).toBe(1e10 + 1);\n    });\n\n    it(\"should handle very small numbers\", () => {\n      expect(round(0.00001)).toBe(0);\n      expect(round(-0.00001)).toBe(-0);\n    });\n\n    it(\"should handle Infinity\", () => {\n      expect(round(Number.POSITIVE_INFINITY)).toBe(Number.POSITIVE_INFINITY);\n      expect(round(Number.NEGATIVE_INFINITY)).toBe(Number.NEGATIVE_INFINITY);\n    });\n\n    it(\"should handle NaN\", () => {\n      expect(round(Number.NaN)).toBe(Number.NaN);\n    });\n\n    it(\"should handle floating point precision issues\", () => {\n      expect(round(0.1 + 0.2)).toBe(0); // 0.1 + 0.2 = 0.30000000000000004\n      expect(round(1.1 + 1.2)).toBe(2); // Should round to 2\n    });\n  });\n});\n"]}