{"version":3,"sources":["log.test.ts"],"names":["log","round","describe","mockConsoleLog","jest","fn","originalConsoleLog","console","beforeEach","afterEach","mockClear","it","args","key","expect","toHaveBeenCalledWith","undefined","complexObj","nested","array","func","date","Date","arr","three","toBe","Number","NEGATIVE_INFINITY","Math","PI","POSITIVE_INFINITY","NaN"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,OAA3B;AAEAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BA,EAAAA,QAAQ,CAAC,KAAD,EAAQ,MAAM;AACpB,UAAMC,cAAc,GAAGC,IAAI,CAACC,EAAL,EAAvB;AACA,UAAMC,kBAAkB,GAAGC,OAAO,CAACP,GAAnC;AAEAQ,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACP,GAAR,GAAcG,cAAd;AACD,KAFS,CAAV;AAIAM,IAAAA,SAAS,CAAC,MAAM;AACdN,MAAAA,cAAc,CAACO,SAAf;AACAH,MAAAA,OAAO,CAACP,GAAR,GAAcM,kBAAd;AACD,KAHQ,CAAT;AAKAK,IAAAA,EAAE,CAAC,iDAAD,EAAoD,MAAM;AAC1D,YAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,GAAT,EAAc;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAAd,CAAb;AACAb,MAAAA,GAAG,CAAC,GAAGY,IAAJ,CAAH;AAEAE,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4C,GAAGH,IAA/C;AACD,KALC,CAAF;AAOAD,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxCX,MAAAA,GAAG,CAAC,MAAD,CAAH;AACAc,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4C,MAA5C;AACD,KAHC,CAAF;AAKAJ,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CX,MAAAA,GAAG,CAAC,MAAD,EAAS,GAAT,EAAc,IAAd,CAAH;AACAc,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4C,MAA5C,EAAoD,GAApD,EAAyD,IAAzD;AACD,KAHC,CAAF;AAKAJ,IAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACrCX,MAAAA,GAAG;AACHc,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB;AACD,KAHC,CAAF;AAKAJ,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CX,MAAAA,GAAG,CAAC,IAAD,EAAOgB,SAAP,CAAH;AACAF,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4C,IAA5C,EAAkDC,SAAlD;AACD,KAHC,CAAF;AAKAL,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxC,YAAMM,UAAU,GAAG;AACjBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAT,SADS;AAEjBC,QAAAA,IAAI,EAAE,MAAM,MAFK;AAGjBC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,YAAT;AAHW,OAAnB;AAKAtB,MAAAA,GAAG,CAACiB,UAAD,CAAH;AACAH,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4CE,UAA5C;AACD,KARC,CAAF;AAUAN,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,YAAMY,GAAG,GAAG,CAAC,CAAD,EAAI,KAAJ,EAAW;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAX,CAAZ;AACAxB,MAAAA,GAAG,CAACuB,GAAD,CAAH;AACAT,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CAA4CQ,GAA5C;AACD,KAJC,CAAF;AAMAZ,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCX,MAAAA,GAAG,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,IAArB,EAA2BgB,SAA3B,EAAsC;AAAEH,QAAAA,GAAG,EAAE;AAAP,OAAtC,EAAwD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxD,CAAH;AACAC,MAAAA,MAAM,CAACX,cAAD,CAAN,CAAuBY,oBAAvB,CACE,QADF,EAEE,EAFF,EAGE,IAHF,EAIE,IAJF,EAKEC,SALF,EAME;AAAEH,QAAAA,GAAG,EAAE;AAAP,OANF,EAOE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPF;AASD,KAXC,CAAF;AAYD,GApEO,CAAR;AAsEAX,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBS,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDG,MAAAA,MAAM,CAACb,KAAK,CAAC,GAAD,CAAN,CAAN,CAAmBwB,IAAnB,CAAwB,CAAxB;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,GAAD,CAAN,CAAN,CAAmBwB,IAAnB,CAAwB,CAAxB;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,GAAD,CAAN,CAAN,CAAmBwB,IAAnB,CAAwB,CAAxB;AACD,KAJC,CAAF;AAMAd,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDG,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,GAAF,CAAN,CAAN,CAAoBwB,IAApB,CAAyB,CAAC,CAA1B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,GAAF,CAAN,CAAN,CAAoBwB,IAApB,CAAyB,CAAC,CAA1B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,GAAF,CAAN,CAAN,CAAoBwB,IAApB,CAAyB,CAAC,CAA1B;AACD,KAJC,CAAF;AAMAd,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCG,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAD,CAAN,CAAN,CAAiBwB,IAAjB,CAAsB,CAAtB;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,CAAF,CAAN,CAAN,CAAkBwB,IAAlB,CAAuB,CAAC,CAAxB;AACAX,MAAAA,MAAM,CAAC,IAAIb,KAAK,CAAC,CAAC,CAAF,CAAV,CAAN,CAAsBwB,IAAtB,CAA2BC,MAAM,CAACC,iBAAlC;AACD,KAJC,CAAF;AAMAhB,IAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCG,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAD,CAAN,CAAN,CAAiBwB,IAAjB,CAAsB,CAAtB;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,CAAF,CAAN,CAAN,CAAkBwB,IAAlB,CAAuB,CAAC,CAAxB;AACD,KAHC,CAAF;AAKAd,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCG,MAAAA,MAAM,CAACb,KAAK,CAAC2B,IAAI,CAACC,EAAN,CAAN,CAAN,CAAuBJ,IAAvB,CAA4B,CAA5B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC2B,IAAI,CAACC,EAAP,CAAN,CAAN,CAAwBJ,IAAxB,CAA6B,CAAC,CAA9B;AACD,KAHC,CAAF;AAKAd,IAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AACnCG,MAAAA,MAAM,CAACb,KAAK,CAAC,GAAD,CAAN,CAAN,CAAmBwB,IAAnB,CAAwB,CAAxB;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,GAAF,CAAN,CAAN,CAAoBwB,IAApB,CAAyB,CAAC,CAA1B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,QAAD,CAAN,CAAN,CAAwBwB,IAAxB,CAA6B,CAA7B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,QAAF,CAAN,CAAN,CAAyBwB,IAAzB,CAA8B,CAAC,CAA/B;AACD,KALC,CAAF;AAOAd,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CG,MAAAA,MAAM,CAACb,KAAK,CAAC,OAAO,GAAR,CAAN,CAAN,CAA0BwB,IAA1B,CAA+B,IAA/B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,OAAO,GAAR,CAAN,CAAN,CAA0BwB,IAA1B,CAA+B,OAAO,CAAtC;AACD,KAHC,CAAF;AAKAd,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CG,MAAAA,MAAM,CAACb,KAAK,CAAC,OAAD,CAAN,CAAN,CAAuBwB,IAAvB,CAA4B,CAA5B;AACAX,MAAAA,MAAM,CAACb,KAAK,CAAC,CAAC,OAAF,CAAN,CAAN,CAAwBwB,IAAxB,CAA6B,CAAC,CAA9B;AACD,KAHC,CAAF;AAKAd,IAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCG,MAAAA,MAAM,CAACb,KAAK,CAACyB,MAAM,CAACI,iBAAR,CAAN,CAAN,CAAwCL,IAAxC,CAA6CC,MAAM,CAACI,iBAApD;AACAhB,MAAAA,MAAM,CAACb,KAAK,CAACyB,MAAM,CAACC,iBAAR,CAAN,CAAN,CAAwCF,IAAxC,CAA6CC,MAAM,CAACC,iBAApD;AACD,KAHC,CAAF;AAKAhB,IAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5BG,MAAAA,MAAM,CAACb,KAAK,CAACyB,MAAM,CAACK,GAAR,CAAN,CAAN,CAA0BN,IAA1B,CAA+BC,MAAM,CAACK,GAAtC;AACD,KAFC,CAAF;AAIApB,IAAAA,EAAE,CAAC,+CAAD,EAAkD,MAAM;AACxDG,MAAAA,MAAM,CAACb,KAAK,CAAC,MAAM,GAAP,CAAN,CAAN,CAAyBwB,IAAzB,CAA8B,CAA9B,EADwD,CACtB;;AAClCX,MAAAA,MAAM,CAACb,KAAK,CAAC,MAAM,GAAP,CAAN,CAAN,CAAyBwB,IAAzB,CAA8B,CAA9B,EAFwD,CAEtB;AACnC,KAHC,CAAF;AAID,GA3DO,CAAR;AA4DD,CAnIO,CAAR","sourcesContent":["import { log, round } from \"./log\";\n\ndescribe(\"log utilities\", () => {\n  describe(\"log\", () => {\n    const mockConsoleLog = jest.fn();\n    const originalConsoleLog = console.log;\n\n    beforeEach(() => {\n      console.log = mockConsoleLog;\n    });\n\n    afterEach(() => {\n      mockConsoleLog.mockClear();\n      console.log = originalConsoleLog;\n    });\n\n    it(\"should call console.log with provided arguments\", () => {\n      const args = [\"test\", 123, { key: \"value\" }];\n      log(...args);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith(...args);\n    });\n\n    it(\"should handle single argument\", () => {\n      log(\"test\");\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\");\n    });\n\n    it(\"should handle multiple arguments\", () => {\n      log(\"test\", 123, true);\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\", 123, true);\n    });\n\n    it(\"should handle no arguments\", () => {\n      log();\n      expect(mockConsoleLog).toHaveBeenCalledWith();\n    });\n\n    it(\"should handle null and undefined\", () => {\n      log(null, undefined);\n      expect(mockConsoleLog).toHaveBeenCalledWith(null, undefined);\n    });\n\n    it(\"should handle complex objects\", () => {\n      const complexObj = {\n        nested: { array: [1, 2, 3] },\n        func: () => \"test\",\n        date: new Date(\"2023-01-01\"),\n      };\n      log(complexObj);\n      expect(mockConsoleLog).toHaveBeenCalledWith(complexObj);\n    });\n\n    it(\"should handle arrays\", () => {\n      const arr = [1, \"two\", { three: 3 }];\n      log(arr);\n      expect(mockConsoleLog).toHaveBeenCalledWith(arr);\n    });\n\n    it(\"should handle mixed types\", () => {\n      log(\"string\", 42, true, null, undefined, { key: \"value\" }, [1, 2, 3]);\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        \"string\",\n        42,\n        true,\n        null,\n        undefined,\n        { key: \"value\" },\n        [1, 2, 3]\n      );\n    });\n  });\n\n  describe(\"round\", () => {\n    it(\"should round positive numbers correctly\", () => {\n      expect(round(1.4)).toBe(1);\n      expect(round(1.5)).toBe(2);\n      expect(round(1.6)).toBe(2);\n    });\n\n    it(\"should round negative numbers correctly\", () => {\n      expect(round(-1.4)).toBe(-1);\n      expect(round(-1.5)).toBe(-1);\n      expect(round(-1.6)).toBe(-2);\n    });\n\n    it(\"should handle zero values\", () => {\n      expect(round(0)).toBe(0);\n      expect(round(-0)).toBe(-0);\n      expect(1 / round(-0)).toBe(Number.NEGATIVE_INFINITY);\n    });\n\n    it(\"should handle integers\", () => {\n      expect(round(5)).toBe(5);\n      expect(round(-5)).toBe(-5);\n    });\n\n    it(\"should handle decimal places\", () => {\n      expect(round(Math.PI)).toBe(3);\n      expect(round(-Math.PI)).toBe(-3);\n    });\n\n    it(\"should handle edge cases\", () => {\n      expect(round(0.5)).toBe(1);\n      expect(round(-0.5)).toBe(-0);\n      expect(round(1.999999)).toBe(2);\n      expect(round(-1.999999)).toBe(-2);\n    });\n\n    it(\"should handle very large numbers\", () => {\n      expect(round(1e10 + 0.4)).toBe(1e10);\n      expect(round(1e10 + 0.6)).toBe(1e10 + 1);\n    });\n\n    it(\"should handle very small numbers\", () => {\n      expect(round(0.00001)).toBe(0);\n      expect(round(-0.00001)).toBe(-0);\n    });\n\n    it(\"should handle Infinity\", () => {\n      expect(round(Number.POSITIVE_INFINITY)).toBe(Number.POSITIVE_INFINITY);\n      expect(round(Number.NEGATIVE_INFINITY)).toBe(Number.NEGATIVE_INFINITY);\n    });\n\n    it(\"should handle NaN\", () => {\n      expect(round(Number.NaN)).toBe(Number.NaN);\n    });\n\n    it(\"should handle floating point precision issues\", () => {\n      expect(round(0.1 + 0.2)).toBe(0); // 0.1 + 0.2 = 0.30000000000000004\n      expect(round(1.1 + 1.2)).toBe(2); // Should round to 2\n    });\n  });\n});\n"]}