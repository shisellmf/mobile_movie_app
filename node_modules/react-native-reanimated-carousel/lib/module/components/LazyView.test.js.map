{"version":3,"sources":["LazyView.test.tsx"],"names":["render","React","Text","LazyView","describe","it","getByText","expect","toBeTruthy","queryByText","toBeNull","container","children","length","toBe"],"mappings":"AAAA,SAASA,MAAT,QAAuB,+BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,QAAT,QAAyB,YAAzB;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,EAAAA,EAAE,CAAC,kDAAD,EAAqD,MAAM;AAC3D,UAAM;AAAEC,MAAAA;AAAF,QAAgBN,MAAM,eAC1B,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAxB,oBACE,oBAAC,IAAD,QAAM,YAAN,CADF,CAD0B,CAA5B;AAMAO,IAAAA,MAAM,CAACD,SAAS,CAAC,YAAD,CAAV,CAAN,CAAgCE,UAAhC;AACD,GARC,CAAF;AAUAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChE,UAAM;AAAEI,MAAAA;AAAF,QAAkBT,MAAM,eAC5B,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAxB,oBACE,oBAAC,IAAD,QAAM,YAAN,CADF,CAD4B,CAA9B;AAMAO,IAAAA,MAAM,CAACE,WAAW,CAAC,YAAD,CAAZ,CAAN,CAAkCC,QAAlC;AACD,GARC,CAAF;AAUAL,EAAAA,EAAE,CAAC,yDAAD,EAA4D,MAAM;AAClE,UAAM;AAAEM,MAAAA;AAAF,QAAgBX,MAAM,eAC1B,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAxB,oBACE,oBAAC,IAAD,QAAM,YAAN,CADF,CAD0B,CAA5B;AAMAO,IAAAA,MAAM,CAACI,SAAS,CAACC,QAAV,CAAmBC,MAApB,CAAN,CAAkCC,IAAlC,CAAuC,CAAvC;AACD,GARC,CAAF;AAUAT,EAAAA,EAAE,CAAC,2DAAD,EAA8D,MAAM;AACpE,UAAM;AAAEC,MAAAA;AAAF,QAAgBN,MAAM,eAC1B,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAxB,oBACE,oBAAC,IAAD,QAAM,aAAN,CADF,eAEE,oBAAC,IAAD,QAAM,cAAN,CAFF,CAD0B,CAA5B;AAOAO,IAAAA,MAAM,CAACD,SAAS,CAAC,aAAD,CAAV,CAAN,CAAiCE,UAAjC;AACAD,IAAAA,MAAM,CAACD,SAAS,CAAC,cAAD,CAAV,CAAN,CAAkCE,UAAlC;AACD,GAVC,CAAF;AAYAH,EAAAA,EAAE,CAAC,gEAAD,EAAmE,MAAM;AACzE,UAAM;AAAEI,MAAAA;AAAF,QAAkBT,MAAM,eAC5B,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAxB,oBACE,oBAAC,IAAD,QAAM,aAAN,CADF,eAEE,oBAAC,IAAD,QAAM,cAAN,CAFF,CAD4B,CAA9B;AAOAO,IAAAA,MAAM,CAACE,WAAW,CAAC,aAAD,CAAZ,CAAN,CAAmCC,QAAnC;AACAH,IAAAA,MAAM,CAACE,WAAW,CAAC,cAAD,CAAZ,CAAN,CAAoCC,QAApC;AACD,GAVC,CAAF;AAWD,CAtDO,CAAR","sourcesContent":["import { render } from \"@testing-library/react-native\";\nimport React from \"react\";\nimport { Text } from \"react-native\";\n\nimport { LazyView } from \"./LazyView\";\n\ndescribe(\"LazyView\", () => {\n  it(\"should render children when shouldUpdate is true\", () => {\n    const { getByText } = render(\n      <LazyView shouldUpdate={true}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(getByText(\"Test Child\")).toBeTruthy();\n  });\n\n  it(\"should not render children when shouldUpdate is false\", () => {\n    const { queryByText } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(queryByText(\"Test Child\")).toBeNull();\n  });\n\n  it(\"should render empty fragment when shouldUpdate is false\", () => {\n    const { container } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>Test Child</Text>\n      </LazyView>\n    );\n\n    expect(container.children.length).toBe(0);\n  });\n\n  it(\"should handle multiple children when shouldUpdate is true\", () => {\n    const { getByText } = render(\n      <LazyView shouldUpdate={true}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </LazyView>\n    );\n\n    expect(getByText(\"First Child\")).toBeTruthy();\n    expect(getByText(\"Second Child\")).toBeTruthy();\n  });\n\n  it(\"should not render multiple children when shouldUpdate is false\", () => {\n    const { queryByText } = render(\n      <LazyView shouldUpdate={false}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </LazyView>\n    );\n\n    expect(queryByText(\"First Child\")).toBeNull();\n    expect(queryByText(\"Second Child\")).toBeNull();\n  });\n});\n"]}