{"version":3,"sources":["PaginationItem.tsx"],"names":["React","Pressable","View","Animated","Extrapolation","interpolate","useAnimatedStyle","PaginationItem","props","animValue","dotStyle","activeDotStyle","index","count","size","horizontal","children","onPress","accessibilityLabel","defaultDotSize","sizes","width","height","animStyle","inputRange","outputRange","value","transform","translateX","CLAMP","selected","overflow","rotateZ","backgroundColor","flex"],"mappings":"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","sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport React from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport { Pressable, View } from \"react-native\";\nimport Animated, { Extrapolation, interpolate, useAnimatedStyle } from \"react-native-reanimated\";\n\nexport type DotStyle = Omit<ViewStyle, \"width\" | \"height\"> & {\n  width?: number;\n  height?: number;\n};\n\nexport const PaginationItem: React.FC<\n  PropsWithChildren<{\n    index: number;\n    count: number;\n    size?: number;\n    animValue: Animated.SharedValue<number>;\n    horizontal?: boolean;\n    dotStyle?: DotStyle;\n    activeDotStyle?: DotStyle;\n    onPress: () => void;\n    accessibilityLabel?: string;\n  }>\n> = (props) => {\n  const {\n    animValue,\n    dotStyle,\n    activeDotStyle,\n    index,\n    count,\n    size,\n    horizontal,\n    children,\n    onPress,\n    accessibilityLabel,\n  } = props;\n\n  const defaultDotSize = 10;\n\n  const sizes = {\n    width: size || dotStyle?.width || defaultDotSize,\n    height: size || dotStyle?.height || defaultDotSize,\n  };\n\n  /**\n   * TODO: Keep this for future implementation\n   * Used to change the size of the active dot with animation\n   */\n  // const animatedSize = {\n  //   width: activeDotStyle?.width,\n  //   height: activeDotStyle?.height,\n  // };\n\n  const width = sizes.width;\n  const height = sizes.height;\n\n  const animStyle = useAnimatedStyle(() => {\n    const size = horizontal ? height : width;\n    let inputRange = [index - 1, index, index + 1];\n    let outputRange = [-size, 0, size];\n\n    if (index === 0 && animValue?.value > count - 1) {\n      inputRange = [count - 1, count, count + 1];\n      outputRange = [-size, 0, size];\n    }\n\n    return {\n      transform: [\n        {\n          translateX: interpolate(animValue?.value, inputRange, outputRange, Extrapolation.CLAMP),\n        },\n      ],\n    };\n  }, [animValue, index, count, horizontal]);\n\n  return (\n    <Pressable\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"button\"\n      accessibilityHint={animValue.value === index ? \"\" : `Go to ${accessibilityLabel}`}\n      accessibilityState={{ selected: animValue.value === index }}\n    >\n      <View\n        style={[\n          {\n            width,\n            height,\n            overflow: \"hidden\",\n            transform: [\n              {\n                rotateZ: horizontal ? \"90deg\" : \"0deg\",\n              },\n            ],\n          },\n          dotStyle,\n        ]}\n      >\n        <Animated.View\n          style={[\n            {\n              backgroundColor: \"black\",\n              flex: 1,\n            },\n            animStyle,\n            activeDotStyle,\n          ]}\n        >\n          {children}\n        </Animated.View>\n      </View>\n    </Pressable>\n  );\n};\n"]}