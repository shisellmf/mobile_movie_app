{"version":3,"sources":["index.test.tsx"],"names":["render","React","Text","GlobalStateContext","GlobalStateProvider","useGlobalState","jest","mock","useSharedValue","fn","initialValue","value","describe","mockProps","width","height","data","renderItem","mockCommon","size","validLength","mockValue","props","common","it","getByText","expect","toBeTruthy","contextValue","TestComponent","useContext","toHaveProperty","layout","containerSize","toEqual","itemDimensions","updateItemDimensions","toBe","updateContainerSize","hookResult","context","contextResult"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react-native\";\nimport React from \"react\";\nimport { Text } from \"react-native\";\n\nimport { GlobalStateContext, GlobalStateProvider, useGlobalState } from \"./index\";\n\n// Mock react-native-reanimated\njest.mock(\"react-native-reanimated\", () => ({\n  useSharedValue: jest.fn((initialValue) => ({\n    value: initialValue,\n  })),\n}));\n\ndescribe(\"GlobalStateProvider\", () => {\n  const mockProps = {\n    width: 300,\n    height: 200,\n    data: [1, 2, 3],\n    renderItem: () => <Text>Item</Text>,\n  } as any;\n\n  const mockCommon = {\n    size: 300,\n    validLength: 3,\n  };\n\n  const mockValue = {\n    props: mockProps,\n    common: mockCommon,\n  };\n\n  it(\"should render children correctly\", () => {\n    const { getByText } = render(\n      <GlobalStateProvider value={mockValue}>\n        <Text>Test Child</Text>\n      </GlobalStateProvider>\n    );\n\n    expect(getByText(\"Test Child\")).toBeTruthy();\n  });\n\n  it(\"should provide context value with layout methods\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue).toHaveProperty(\"props\");\n    expect(contextValue).toHaveProperty(\"common\");\n    expect(contextValue).toHaveProperty(\"layout\");\n    expect(contextValue.layout).toHaveProperty(\"containerSize\");\n    expect(contextValue.layout).toHaveProperty(\"itemDimensions\");\n    expect(contextValue.layout).toHaveProperty(\"updateItemDimensions\");\n    expect(contextValue.layout).toHaveProperty(\"updateContainerSize\");\n  });\n\n  it(\"should initialize containerSize with default values\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.layout.containerSize.value).toEqual({ width: 0, height: 0 });\n  });\n\n  it(\"should initialize itemDimensions with empty object\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.layout.itemDimensions.value).toEqual({});\n  });\n\n  it(\"should provide updateItemDimensions function\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(typeof contextValue.layout.updateItemDimensions).toBe(\"function\");\n\n    // Test the function\n    contextValue.layout.updateItemDimensions(0, { width: 100, height: 50 });\n    expect(contextValue.layout.itemDimensions.value).toEqual({\n      0: { width: 100, height: 50 },\n    });\n  });\n\n  it(\"should provide updateContainerSize function\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(typeof contextValue.layout.updateContainerSize).toBe(\"function\");\n\n    // Test the function\n    contextValue.layout.updateContainerSize({ width: 400, height: 300 });\n    expect(contextValue.layout.containerSize.value).toEqual({ width: 400, height: 300 });\n  });\n\n  it(\"should merge props and common with layout\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(contextValue.props).toEqual(mockProps);\n    expect(contextValue.common).toEqual(mockCommon);\n  });\n\n  it(\"should handle multiple children\", () => {\n    const { getByText } = render(\n      <GlobalStateProvider value={mockValue}>\n        <Text>First Child</Text>\n        <Text>Second Child</Text>\n      </GlobalStateProvider>\n    );\n\n    expect(getByText(\"First Child\")).toBeTruthy();\n    expect(getByText(\"Second Child\")).toBeTruthy();\n  });\n\n  it(\"should handle updateItemDimensions with multiple items\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    // Add multiple items\n    contextValue.layout.updateItemDimensions(0, { width: 100, height: 50 });\n    contextValue.layout.updateItemDimensions(1, { width: 120, height: 60 });\n    contextValue.layout.updateItemDimensions(2, { width: 90, height: 45 });\n\n    expect(contextValue.layout.itemDimensions.value).toEqual({\n      0: { width: 100, height: 50 },\n      1: { width: 120, height: 60 },\n      2: { width: 90, height: 45 },\n    });\n  });\n});\n\ndescribe(\"useGlobalState\", () => {\n  const mockValue = {\n    props: { width: 300, data: [1, 2, 3], renderItem: () => <Text>Item</Text> } as any,\n    common: { size: 300, validLength: 3 },\n  };\n\n  it(\"should return context value when used within provider\", () => {\n    let hookResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toHaveProperty(\"props\");\n    expect(hookResult).toHaveProperty(\"common\");\n    expect(hookResult).toHaveProperty(\"layout\");\n  });\n\n  it(\"should provide expected hook functionality\", () => {\n    // Test that hook returns context when used correctly\n    let hookResult: any;\n\n    const TestComponent = () => {\n      const context = useGlobalState();\n      hookResult = context;\n      return <Text>Test</Text>;\n    };\n\n    const mockValue = {\n      props: { width: 300, data: [1, 2, 3], renderItem: () => <Text>Item</Text> } as any,\n      common: { size: 300, validLength: 3 },\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toHaveProperty(\"props\");\n    expect(hookResult).toHaveProperty(\"common\");\n    expect(hookResult).toHaveProperty(\"layout\");\n  });\n\n  it(\"should return the same context value as directly accessing context\", () => {\n    let hookResult: any;\n    let contextResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      contextResult = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult).toBe(contextResult);\n  });\n\n  it(\"should provide all expected properties\", () => {\n    let hookResult: any;\n\n    const TestComponent = () => {\n      hookResult = useGlobalState();\n      return <Text>Test</Text>;\n    };\n\n    render(\n      <GlobalStateProvider value={mockValue}>\n        <TestComponent />\n      </GlobalStateProvider>\n    );\n\n    expect(hookResult.props).toEqual(mockValue.props);\n    expect(hookResult.common).toEqual(mockValue.common);\n    expect(hookResult.layout).toHaveProperty(\"containerSize\");\n    expect(hookResult.layout).toHaveProperty(\"itemDimensions\");\n    expect(hookResult.layout).toHaveProperty(\"updateItemDimensions\");\n    expect(hookResult.layout).toHaveProperty(\"updateContainerSize\");\n  });\n});\n\ndescribe(\"GlobalStateContext\", () => {\n  it(\"should have default empty context value\", () => {\n    let contextValue: any;\n\n    const TestComponent = () => {\n      contextValue = React.useContext(GlobalStateContext);\n      return <Text>Test</Text>;\n    };\n\n    render(<TestComponent />);\n\n    expect(contextValue).toEqual({});\n  });\n});\n"]}